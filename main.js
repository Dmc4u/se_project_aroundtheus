!function(){"use strict";const t=new class{constructor(t){this._baseUrl=t.baseUrl,this._headers=t.headers}_handleResponse(t){return t.ok?t.json():Promise.reject(`Error: ${t.status}`)}_request(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return fetch(`${this._baseUrl}${t}`,{headers:this._headers,...e}).then(this._handleResponse)}getUserInfo(){return this._request("/users/me")}updateUserInfo(t,e){return this._request("/users/me",{method:"PATCH",body:JSON.stringify({name:t,about:e})})}updateUserAvatar(t){return this._request("/users/me/avatar",{method:"PATCH",body:JSON.stringify({avatar:t})})}getInitialCards(){return this._request("/cards")}addCard(t,e){return this._request("/cards",{method:"POST",body:JSON.stringify({name:t,link:e})})}deleteCard(t){return this._request(`/cards/${t}`,{method:"DELETE"})}toggleLike(t,e){return this._request(`/cards/${t}/likes`,{method:e?"DELETE":"PUT"})}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"6bf5193a-6919-4631-9825-3d61c0e57a1f","Content-Type":"application/json"}});var e=t;class s{constructor(t,e,s,r,n){let{name:i,link:o,_id:a,isLiked:l}=t;this._id=a,this._name=i,this._link=o,this._isLiked=l,this._cardSelector=e,this._handleImageClick=s,this._handleDeleteCard=r,this._handleLikeCard=n}getId(){return this._id}isLiked(){return this._isLiked}updateLikesView(t){this._isLiked=t,this._likeButton.classList.toggle("card__like-button_active",this._isLiked)}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{this._handleLikeCard(this)})),this._deleteButton.addEventListener("click",(()=>{this._handleDeleteCard(this,this._id)})),this._cardImage.addEventListener("click",(()=>{this._handleImageClick({name:this._name,link:this._link})}))}generateCard(){return this._element=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._cardImage=this._element.querySelector(".card__image"),this._likeButton=this._element.querySelector(".card__like-button"),this._deleteButton=this._element.querySelector(".card__delete-button"),this._element.querySelector(".card__title").textContent=this._name,this._cardImage.src=this._link,this._cardImage.alt=this._name,this.updateLikesView(this._isLiked),this._setEventListeners(),this._element}removeCard(){this._element.remove(),this._element=null}}class r{constructor(t,e){if(this._settings=t,this._formElement=e,this._inputList=Array.from(this._formElement.querySelectorAll(this._settings.inputSelector)),this._buttonElement=this._formElement.querySelector(this._settings.submitButtonSelector),!this._buttonElement||0===this._inputList.length)throw new Error("FormValidator: Invalid form structure or missing elements.")}_showInputError(t,e){const s=this._formElement.querySelector(`#${t.id}-error`);s&&(t.classList.add(this._settings.inputErrorClass),s.textContent=e,s.classList.add(this._settings.errorClass))}_hideInputError(t){const e=this._formElement.querySelector(`#${t.id}-error`);e&&(t.classList.remove(this._settings.inputErrorClass),e.textContent="",e.classList.remove(this._settings.errorClass))}_checkInputValidity(t){t.validity.valid?this._hideInputError(t):this._showInputError(t,t.validationMessage)}_toggleButtonState(){const t=this._inputList.some((t=>!t.validity.valid));this._buttonElement.disabled=t,this._buttonElement.classList.toggle(this._settings.inactiveButtonClass,t)}disableButton(){this._buttonElement.disabled=!0,this._buttonElement.classList.add(this._settings.inactiveButtonClass)}_setEventListeners(){this._toggleButtonState(),this._inputList.forEach((t=>{t.addEventListener("input",(()=>{this._checkInputValidity(t),this._toggleButtonState()}))}))}resetValidation(){this._toggleButtonState(),this._inputList.forEach((t=>this._hideInputError(t)))}enableValidation(){this._setEventListeners()}}class n{constructor(t,e){let{renderer:s}=t;if("function"!=typeof s)throw new Error("Section: Renderer must be a valid function.");if(this._renderer=s,this._container=document.querySelector(e),!this._container)throw new Error(`Section: Container with selector "${e}" not found.`)}renderItems(t){if(!Array.isArray(t)||0===t.length)return void console.warn("Section: No valid items to render.");const e=document.createDocumentFragment();t.forEach((t=>{const s=this._renderer(t);s&&e.appendChild(s)})),this._container.appendChild(e)}addItem(t){t?this._container.prepend(t):console.error("Section: Cannot add an empty or undefined element.")}}class i{constructor(t){if(this._popup=document.querySelector(t),!this._popup)throw new Error(`Popup with selector "${t}" not found.`);this._boundHandleEscClose=this._handleEscClose.bind(this),this._confirmButton=this._popup.querySelector(".popup__confirm")}open(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._boundHandleEscClose),t&&(this._confirmAction=t)}close(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._boundHandleEscClose),this._confirmAction=null}_handleEscClose(t){"Escape"===t.key&&this.close()}setEventListeners(){this._popup.addEventListener("click",(t=>{(t.target.classList.contains("popup_opened")||t.target.classList.contains("popup__close"))&&this.close()})),this._confirmButton&&this._confirmButton.addEventListener("click",(()=>{this._confirmAction&&(this._confirmAction(),this.close())}))}}class o extends i{constructor(t){if(super(t),this._popupImage=this._popup.querySelector(".popup__image"),this._popupCaption=this._popup.querySelector(".popup__caption"),!this._popupImage||!this._popupCaption)throw new Error(`PopupWithImage: Required elements not found in "${t}".`)}open(t){let{link:e,name:s}=t;this._popupImage.src=e,this._popupImage.alt=s,this._popupCaption.textContent=s,super.open()}}class a extends i{constructor(t,e){super(t),this._handleSubmit=e,this._form=this._popup.querySelector("form"),this._inputList=Array.from(this._form.querySelectorAll("input")),this._submitButton=this._form.querySelector(".popup__button"),this._defaultButtonText=this._submitButton.textContent}_getInputValues(){return this._inputList.reduce(((t,e)=>(t[e.name]=e.value,t)),{})}setInputValues(t){this._inputList.forEach((e=>{e.value=t[e.name]||""}))}_handleFormSubmit(t){t.preventDefault(),this._toggleLoadingState(!0);const e=this._getInputValues();console.log("Input data:",e);const s=this._handleSubmit(e);console.log("Submit result:",s),s&&"function"==typeof s.then?s.then((()=>this.close())).catch((t=>console.error("Error submitting form:",t))).finally((()=>{this._toggleLoadingState(!1)})):(console.error("Submit callback did not return a promise"),this._toggleLoadingState(!1))}_toggleLoadingState(t){this._submitButton.textContent=t?"Saving...":this._defaultButtonText,this._submitButton.disabled=t}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",this._handleFormSubmit.bind(this))}resetForm(){this._form.reset()}close(){super.close(),this.resetForm()}}class l extends i{constructor(t){super(t),this._confirmButton=this._popup.querySelector(".popup__confirm"),this._handleSubmit=null}setSubmitAction(t){"function"==typeof t?this._handleSubmit=t:console.error("PopupWithConfirmation: setSubmitAction must be a function")}setEventListeners(){super.setEventListeners(),this._confirmButton.addEventListener("click",(()=>{this._handleSubmit?(this._toggleLoadingState(!0),Promise.resolve(this._handleSubmit()).then((()=>this.close())).catch((t=>console.error("Error processing request:",t))).finally((()=>this._toggleLoadingState(!1)))):console.error("PopupWithConfirmation: No submit action set")}))}_toggleLoadingState(t){this._confirmButton.textContent=t?"Processing...":"Yes",this._confirmButton.disabled=t}}class u{constructor(t){let{nameSelector:e,aboutSelector:s,avatarSelector:r}=t;if(this._nameElement=document.querySelector(e),this._aboutElement=document.querySelector(s),this._avatarElement=document.querySelector(r),this._userId=null,!this._nameElement||!this._aboutElement||!this._avatarElement)throw new Error("UserInfo: One or more selectors are invalid.")}getUserId(){return this._userId}getUserInfo(){return{name:this._nameElement.textContent.trim(),about:this._aboutElement.textContent.trim(),avatar:this._avatarElement.src||"",userId:this._userId}}setUserInfo(t){let{name:e,about:s,avatar:r,_id:n}=t;"string"==typeof e&&e.trim()&&(this._nameElement.textContent=e),"string"==typeof s&&s.trim()&&(this._aboutElement.textContent=s),"string"==typeof r&&r.trim()&&this.setUserAvatar(r),n&&(this._userId=n)}setUserAvatar(t){"string"==typeof t&&t.trim()?this._avatarElement.src=t:console.warn("UserInfo: Invalid avatar URL.")}}const c={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible"};document.addEventListener("DOMContentLoaded",(()=>{const t=document.querySelector("#edit-profile-button"),i=document.querySelector("#add-card-button"),d=document.querySelector("#change-profile-picture-button"),h=new u({nameSelector:".profile__title",aboutSelector:".profile__description",avatarSelector:".profile__image"}),_={},p=t=>{const e=new s(t,"#card-template",(t=>E.open(t)),(e=>f(e,t._id)),(()=>m(e)));return e.generateCard()},m=t=>{const s=t.isLiked();e.toggleLike(t.getId(),s).then((e=>{t.updateLikesView(e.isLiked)})).catch((t=>console.error(`Error updating like status: ${t}`)))},g=new l("#confirm-delete-popup");g.setEventListeners();const f=(t,s)=>{g.setSubmitAction((()=>e.deleteCard(s).then((()=>{t.removeCard(),g.close()})).catch((t=>console.error(`Error deleting card: ${t}`))))),g.open()},E=new o("#picture-popup");E.setEventListeners();const v=new a("#add-card-popup",(t=>e.addCard(t.name,t.link).then((t=>{S.addItem(p(t)),_["add-card-form"].disableButton(),v.close()})).catch((t=>console.error("Error adding card:",t)))));v.setEventListeners();const b=new a("#edit-profile-popup",(t=>e.updateUserInfo(t.name,t.about).then((t=>{h.setUserInfo(t),b.close()})).catch((t=>console.error("Error updating profile:",t)))));b.setEventListeners();const L=new a("#change-profile-picture-popup",(t=>e.updateUserAvatar(t.avatar).then((t=>{h.setUserAvatar(t.avatar),L.close()})).catch((t=>console.error("Error updating profile picture:",t)))));L.setEventListeners();const S=new n({renderer:t=>S.addItem(p(t))},".cards__list");var y;Promise.all([e.getUserInfo(),e.getInitialCards()]).then((t=>{let[e,s]=t;h.setUserInfo(e),h.setUserAvatar(e.avatar),S.renderItems(s.reverse())})).catch((t=>console.error("Error loading initial data:",t))),t.addEventListener("click",(()=>{b.setInputValues(h.getUserInfo()),_["edit-profile-form"].resetValidation(),b.open()})),i.addEventListener("click",(()=>{_["add-card-form"].resetValidation(),v.open()})),d.addEventListener("click",(()=>{_["change-profile-picture-form"].resetValidation(),L.open()})),y=c,document.querySelectorAll(y.formSelector).forEach((t=>{const e=new r(y,t);_[t.getAttribute("name")]=e,e.enableValidation()}))}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,